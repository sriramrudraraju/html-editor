{"version":3,"sources":["app/utilities.ts","app/parser/parser.component.tsx","app/bindings-table/bindings-table.component.tsx","app/app.tsx","serviceWorker.ts","index.tsx"],"names":["example","convertArrayToObjectKeys","arr","length","reduce","a","b","getBindingsArray","input","matchedResults","match","map","val","replace","Parser","bindings","output","useMemo","obj","Object","keys","constructor","mapObj","re","RegExp","key","join","matched","prop","Fragment","ReactHtmlParser","BindingsTable","onValueChange","onChangeInput","useCallback","event","target","value","style","width","defaultValue","onChange","App","useState","html","setHtml","setBindings","onHtmlChange","text","bindingsObject","onBindingsTableValueChange","className","height","fontSize","placeholder","border","padding","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.497fcf34.chunk.js","sourcesContent":["export const example = `\n    <style>\n      .author {\n        color: blue\n      }\n    </style>\n    \n    <div>\n      <div class=\"quote\" style=\"color: red\">Quote: {{quote}}</div>\n      <p>just a line</p>\n      <div class=\"author\">Author: {{author}}</div>\n    </div>\n`;\n\nexport function convertArrayToObjectKeys<T>(arr: T[]) {\n  if(arr === null || arr.length === 0 ) {\n    return {};\n  }\n  // convert array of values to object with keys as values of array\n  // eslint-disable-next-line no-sequences\n  return arr.reduce((a: any,b) => (a[b]='', a), {});\n}\n\n// array of names/keys that are wrapped inside {{ }}\nexport function getBindingsArray(input: string) {\n  // match the strings with brackets around them\n  const matchedResults = input.match(/{\\{(.*?)}\\}/g);\n  // replace the brackets with empty char\n  const results = matchedResults && matchedResults.map(function(val){\n      return val.replace(/{\\{|}\\}/g,'');\n  });\n  return results || [];\n}\n\nexport function isObjectEmpty(obj: any) {\n  return Object.keys(obj).length === 0 && obj.constructor === Object;\n}","import React, { FC, useMemo } from 'react';\nimport ReactHtmlParser from 'react-html-parser';\n\nimport { isObjectEmpty } from '../utilities';\n\ninterface ParserProps {\n  input: string;\n  bindings: object;\n}\n\nexport const Parser: FC<ParserProps> = ({input, bindings}) => {\n\n // string after replacing names in {{ }} with their respective values\n const output = useMemo(\n  () => {\n    if (isObjectEmpty(bindings)) {\n      return input;\n    }\n    const mapObj: any = bindings;\n    const re = new RegExp((Object.keys(mapObj).map(key => `{{${key}}}`)).join(\"|\"),\"gi\");\n    const replaced = input.replace(re, function(matched){\n      const prop = matched.replace(/{\\{|}\\}/g,'');\n      return mapObj[prop];\n    });\n    return replaced;\n  },\n  [input, bindings]\n);\n\n  return <React.Fragment>{ReactHtmlParser(output)}</React.Fragment>;\n}","import React, { FC, useCallback } from 'react';\n\ninterface BindingsTableProps {\n  bindings: any;\n  onValueChange: (key: any, value: any) => void;\n}\n\nexport const BindingsTable: FC<BindingsTableProps> = ({bindings, onValueChange}) => {\n  const onChangeInput = useCallback(\n    (key, event: any) => {\n      onValueChange(key, event.target.value);\n    },\n    [onValueChange]\n  );\n\n  return (\n    <div>\n      <table style={{width: '90%'}}>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Value</th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            Object.keys(bindings).map((key) => {\n              return (\n                <tr key={key}>\n                  <td>{key}</td>\n                  <td>\n                    <input \n                      defaultValue={bindings[key]} \n                      onChange={(event) => onChangeInput(key, event)}\n                      style={{width: '98%'}} \n                    />\n                  </td>\n                </tr>\n              )\n            })\n          }\n        </tbody>\n      </table>\n    </div>\n  )\n}\n","import React, { useState, useCallback } from 'react';\n\nimport { Parser } from './parser/parser.component';\nimport { BindingsTable } from './bindings-table/bindings-table.component';\n\nimport { convertArrayToObjectKeys, getBindingsArray, example } from './utilities';\n\nimport './app.css';\n\nexport const App = () => {\n\n  const [html, setHtml] = useState(example);\n\n  // TODO: uncomment\n  // const [bindings, setBindings] = useState({});\n  // sinec we have default example value\n  const [bindings, setBindings] = useState(\n    convertArrayToObjectKeys(getBindingsArray(example))\n  );\n\n  const onHtmlChange = useCallback(\n    (event: any) => {\n      const text = event.target.value;\n      const bindings = getBindingsArray(text);\n      const bindingsObject = convertArrayToObjectKeys(bindings);\n      setBindings(bindingsObject);\n      setHtml(text);\n    },\n    [setHtml]\n  );\n\n  const onBindingsTableValueChange = useCallback(\n    (key: any, value: any) => {\n      setBindings({\n        ...bindings,\n       [key]: value\n      })\n    },\n    [bindings]\n  );\n\n  return (\n    <div className=\"app\">\n      <div className=\"app-editor\">\n        <div className=\"app-html\">\n          <h2>Html Editor</h2>\n          <textarea \n            style={{width: '95%', height: '80%', fontSize: 14}} \n            placeholder=\"Html\" \n            onChange={onHtmlChange} \n            defaultValue={example} \n          />\n        </div>\n        <div>\n          <h2>Bindings</h2>\n          <BindingsTable bindings={bindings} onValueChange={onBindingsTableValueChange} />\n        </div>\n        <div className=\"app-api\">\n          <h4>Instructions</h4>\n          <ul>\n            <li>Variables should be wrapped in <small>{`{{ }}`}</small></li>\n            <li>Change the values in bindings table, to simulate api response</li>\n          </ul>\n        </div>\n      </div>\n      <div className=\"app-preview\">\n        <h2>Preview</h2>\n        <div style={{border: '1px solid black', height: '100%', padding: 8}}>\n          { html && <Parser input={html} bindings={bindings} /> }\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}